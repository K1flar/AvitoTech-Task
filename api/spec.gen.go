// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// GetBannerParams defines parameters for GetBanner.
type GetBannerParams struct {
	FeatureId *int `form:"feature_id,omitempty" json:"feature_id,omitempty"`
	TagId     *int `form:"tag_id,omitempty" json:"tag_id,omitempty"`
	Limit     *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// PostBannerJSONBody defines parameters for PostBanner.
type PostBannerJSONBody struct {
	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content,omitempty"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id,omitempty"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active,omitempty"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids,omitempty"`
}

// PostBannerParams defines parameters for PostBanner.
type PostBannerParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// DeleteBannerIdParams defines parameters for DeleteBannerId.
type DeleteBannerIdParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// PatchBannerIdJSONBody defines parameters for PatchBannerId.
type PatchBannerIdJSONBody struct {
	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids"`
}

// PatchBannerIdParams defines parameters for PatchBannerId.
type PatchBannerIdParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// GetUserBannerParams defines parameters for GetUserBanner.
type GetUserBannerParams struct {
	TagId           int   `form:"tag_id" json:"tag_id"`
	FeatureId       int   `form:"feature_id" json:"feature_id"`
	UseLastRevision *bool `form:"use_last_revision,omitempty" json:"use_last_revision,omitempty"`

	// Token Токен пользователя
	Token *string `json:"token,omitempty"`
}

// PostBannerJSONRequestBody defines body for PostBanner for application/json ContentType.
type PostBannerJSONRequestBody PostBannerJSONBody

// PatchBannerIdJSONRequestBody defines body for PatchBannerId for application/json ContentType.
type PatchBannerIdJSONRequestBody PatchBannerIdJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ224bNxN+lQWvN7HyJ/+NLtMCRVqgCVD0qg4EWkvZTPcUkjJiCAJsyW0CxI3RohcF",
	"iqZw2gdYy1ai2NH6FYZvVAwpRVrvri35kLSBriRyuTPDOXzfkNsiPGxEpNoiiiufkSqBPejrTejBQG85",
	"sA8JDGFoplLoEZesMyF5FJIquXWzcrNC2i6JYhbSmJMquW2mXBJTtSZR6tIKDUMm8O8qU/gTxUxQxaPw",
	"nkeq5Aum7toV+JKgAVNMSFL9rkU8JuuCx8oqg1eQwhH0YehAAofwDgYwhIS4hOPjNUY9IySkAe5CRd+z",
	"kLhE1tdYQFEve0KD2OyQegEPa+MVaiPGSakED1dJu+22rMTHTSY2JgIbjKqmYDXuZaSeMvI3OEQTdQcG",
	"ehsGcASJ7kCqNx0c6qcwmGjkoWKrTJSrVHT14uo60IcD459Z1fk84Oosbb/DAN2uO3MIjRoNyc6U+lJv",
	"6229Bf1iuQ9dIpiMo1Ayk1D/q1Twpx6FioUmoWgc+7xuUmrpkUShrSltXLHAvBgLzDzFrRiblujeebya",
	"KYci37oZwzyPo0zqP5jSrUSTuadV7kGKSvUmvDZOTqGfVzbJ4NayLddlUnWWiYwCVhuNXWeZKPZETT8x",
	"Q3zQFP7UvBm1J5uIVh6xujJ7EIwq5tWoKvDOr8YbiaO3IIU3cGiMHOjdvL2NSAQognhUsRuKByxfbu50",
	"YV1RPbmEyxqtK77OCkT+DceQwAGiyBHKhR4MIdVb+L80wCtR5DMaomxblXIeY/VzR3f0T3AwgtD3OZm3",
	"fDRDhaAbOG7G3vmhgBT2cRPQg2O04OLhaBdkQ9YkXJI14/5XuOpO5VaBhX9CCsd6B94Y4xKDSsd6x0Gz",
	"MAI96yAYjFfA0Aq7PbcwLJs+oogDhzaeugsnkKC8/88JGlmsYEJEYipc5c7KOwd+gaHu6o7eNIEZ6l0M",
	"TaqfwQD2MUMcA33ItzZOKEI2g4CKjcmeu/qpjStutGfe+CHHzU7dFAW6xOhL9I/4Arx14ATSccGgp5Zw",
	"FQxGJKG7xGQ1su4IF8nDtkviSBYQ9oNI/tsY21DE4yaT6m7kbVwi0J8Cdi/gtBxOiwsWc4cL5tnwtnP9",
	"xq1LZNTF2owMtSKuH0B6fu8xCxx9ZpndYuxHw8Q/oA9HJpKIipg2Q/0cq2a0YxwsOOXaOGVvunHDbdrW",
	"oSzNTjND2x2f6pZa3Gtbp/pMsTxZfG7mLV3c8/KEYYgAz4oTGjAHnmxJXugANEO5fFzCymDMnYK9/TzZ",
	"gKO7egtOoK+fYbAc3TXhM83eopYvX8t3zg0AHMKx3h3zTjKSOYQE3toU/G9Dwl+TfLKQkKke20DCoJSQ",
	"yzpIquprBS0kTi9AYdHFvu9iw6bv0xUUbG27hq62RMW1dLkluj5Y11ui/1JdcCVv6/jgv+Cea+aeT4tr",
	"Xp6+rIK+PfFk4Wf2ZrQpmaid/53hW8lE2c3FmdfvMxPPKyxPQ5YFubA7x6155mPDFfDeBT4+NCWr+VSq",
	"mmDr3HzwyWpu0KavSLVBfZknk8mtVaI7WAUGNnUXewy9Y9LnBVbFUG+bEntnL6v0i4IrgrMpudzXc9Oz",
	"SaPZW/b5ym92Jv7ym/tf34AUIwf7mPbwuqQt+3DXSgUgkAGosigs6GFBD1dw433qMGKPYmfBbI4l2u1/",
	"AgAA//9/5McH6R4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
